캡슐화 : 접근제한자가 걸린 코드를 클래스 안에 메소드 단위로 묶어 놓는것 ->다른 곳에서도 쓸수 있는 코드면 별도의 코드로 분리시킨다 -> 캡슐화 ->다른 프로젝트에서도 재사용 가능
ex) 휴대폰 adaptor가 휴대폰 내부가 아닌 따로 존재하기 때문에 다른 사용자들이 다같이 쓸 수 있음

*배열의 단점을 보완하기 위해 사용하는 것이 Linked List이다. (꼭 실습해봐야한다)

일반 정수 연산은 속도가 빠르지만 부동소수점 연산은 연산속도가 더 걸린다. (암호화 쪽도 부동소수점 사용)



**********해야할 과제 : 2.5, 2.8, 2.9(Linked List), 3.0(Stack구현), 3.1(Queue), 중첩 클래스 활용 숙달, 나머지 알아서**********

서브클래스 참조변수는 부모클래스로 할 수 없다
ex) A가 부모클래스 B,C 자식 클래스
     A a  = new B(); ,  A a = new C(); 둘다 가능
     B b = new A();  불가능


하나의 변수가 다양한 타입의 인스턴스를 받을 수 있다 -> 다형적 변수
a는 다형적 변수이다( 모든것을 담을 수 있는 Object 타입 변수도 마찬가지임)
Object는 모든 하위 요소를 담을 수 있기 때문에 배열을 사용할 때뿐 아니라 여러가지 상황에서 유용하다.

타입캐스팅은 원래의 타입으로 바꾸는 것 -> 원래 아닌 것을 억지로 타입캐스팅 하면 컴파일러는 일시적으로 허용하지만 실행했을때 에러가 난다

Java는 Auto-Boxing ,Auto-Unboxing 제공한다.

Generic은 타입을 제한 할 수 있고, 자동으로 해당 타입으로 컨버전 해준다.

호출 규칙을 정하는 것 - '인터페이스'

호출자 - caller,   피호출자 - callee

인터페이스를 보는 순간 호출자를 만드는 클래스 입장인지 피호출자를 만드는 입장인지 파악을 해야한다.
ex) 클라이언트에서 요청이 들어오면 caller - Tomcat,  callee -> 해당하는 클래스를 만드는 입장

자기가 필요한 객체는 외부에서 주입받는다 -> D.I (Depency Injection) -> D.I Container
(회사에서 일하려면 노트북이 필요하다 ->  사원이 준비하는것은 말이 안된다 -> 회사에서 주세요 -> 단, 일하기 가능한 정도 이상 되는걸로만(규칙)

일상생활에서도 D.I 적용이 되는 경우가 많다.(핸드폰 직접 안만듬 -> 남이만든 핸드폰 돈주고 외부에서 주입해서 사용)

인터페이스 사용시 기능 교체, 대체가 쉬워진다.


큐 - 예매시스템에서 예매 신청 순서대로 처리하고 싶을 때 사용 , 웹 브라우저에서 이전페이지를 누를 때 이전기록 순서대로 이동하고 싶을 때
스택 - 책 쌓아놓은 것을 위에서부터 꺼내는 형태


Iterator패턴 - 목록을 다루는 자료구조와 구현방법에 상관없이 일관된 방법으로 데이터를 꺼내는 방법
값을 꺼내주는 역할을 하는 것 -Iterator -한번쓰는 용도로만 사용(재사용 X)

중첩 클래스(Inner Class)를 쓰는 이유 - 원본 클래스에서 메소드처럼 사용할 클래스를 만들기 위해 - 중첩 클래스에서는 원본 클래스의 멤버에 접근이 가능하다
익명클래스는 생성자가 존재하지 않는다.
중첩클래스에서는 생성자를 만들수가 없기 때문에 쓰는 것이 인스턴스 블럭이다.(생성자를 만들고 싶어도 생성자 명명 불가능)


커맨드(Command) 패턴 -> 메소드를 객체화 시키는 것 ->명령어 하나당 클래스 하나로 만들어버리는 것 -> 사용할때 해당 클래스를 명령어처럼 사용 가능
-> 기존 코드를 수정할 필요가 없어짐







추상클래스와 인터페이스 사용 할 때의 차이


*servlet - init() 등 4개의 메서드가 있다.